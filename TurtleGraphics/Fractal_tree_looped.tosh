// Variables: ratio, lineSize, branches, angle, i1, i2, ratioPow, ratioSum

when flag clicked
hide
set pen color to #555555
pen up
set ratio to 0.4
forever
	set branches to 2
	set angle to 2
	repeat until <branches > 10>
		setLineSize
		repeat until <<(angle mod 360) = 0> or <<branches mod 2 = 1> and <(angle mod 180) = 0>>>
			clear
			set x to 0
			set y to 0
			point in direction 180
			pen down
			move (lineSize / ratio) steps
			pen up
			tree fractal 0 0 0 lineSize 0
			wait 0.15 secs
			change angle by 2
		end
		change branches by 1
		set angle to 2
	end
	change ratio by 0.1
	if <ratio > 2.4> then
		set ratio to 0.4
	end
end

define tree fractal (xArg) (yArg) (directionArg) (sizeArg) (iteration)
if <<sizeArg > 0.5> and <<iteration < (9 - ceiling of ((branches + 1) / 2))> or <iteration < 4>>> then
	loop 0 xArg yArg directionArg sizeArg iteration
end

define loop (i) (xArg) (yArg) (directionArg) (sizeArg) (iteration)
if <i < branches> then
	set x to xArg
	set y to yArg
	point in direction ((directionArg - ((angle * (branches - 1)) / 2)) + (i * angle))
	pen down
	move sizeArg steps
	pen up
	tree fractal x position y position direction (sizeArg * ratio) (iteration + 1)
	loop (i + 1) xArg yArg directionArg sizeArg (iteration)
end

define setLineSize
set i1 to 1
set ratioSum to 1
repeat until <<i1 > (8 - ceiling of ((branches + 1) / 2))> and <i1 > 3>>
	set i2 to 2
	set ratioPow to ratio
	repeat until <i2 > i1>
		set ratioPow to (ratioPow * ratio)
		change i2 by 1
	end
	change ratioSum by ratioPow
	change i1 by 1
end
set lineSize to 179 / ratioSum